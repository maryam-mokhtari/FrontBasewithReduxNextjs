{"ast":null,"code":"import _Date$now from \"@babel/runtime-corejs2/core-js/date/now\";\nimport _Object$assign from \"@babel/runtime-corejs2/core-js/object/assign\";\nimport { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunkMiddleware from 'redux-thunk';\nvar exampleInitialState = {\n  lastUpdate: 0,\n  light: false,\n  count: 0\n};\nexport var actionTypes = {\n  ADD: 'ADD',\n  TICK: 'TICK' // REDUCERS\n\n};\nexport var reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : exampleInitialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case actionTypes.TICK:\n      return _Object$assign({}, state, {\n        lastUpdate: action.ts,\n        light: !!action.light\n      });\n\n    case actionTypes.ADD:\n      return _Object$assign({}, state, {\n        count: state.count + 1\n      });\n\n    default:\n      return state;\n  }\n}; // ACTIONS\n\nexport var serverRenderClock = function serverRenderClock(isServer) {\n  return function (dispatch) {\n    return dispatch({\n      type: actionTypes.TICK,\n      light: !isServer,\n      ts: _Date$now()\n    });\n  };\n};\nexport var startClock = function startClock() {\n  return function (dispatch) {\n    return setInterval(function () {\n      return dispatch({\n        type: actionTypes.TICK,\n        light: true,\n        ts: _Date$now()\n      });\n    }, 1000);\n  };\n};\nexport var addCount = function addCount() {\n  return function (dispatch) {\n    return dispatch({\n      type: actionTypes.ADD\n    });\n  };\n};\nexport var initStore = function initStore() {\n  var initialState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : exampleInitialState;\n  return createStore(reducer, initialState, composeWithDevTools(applyMiddleware(thunkMiddleware)));\n};","map":{"version":3,"sources":["/home/omid/projects/frontend/store.js"],"names":["createStore","applyMiddleware","composeWithDevTools","thunkMiddleware","exampleInitialState","lastUpdate","light","count","actionTypes","ADD","TICK","reducer","state","action","type","ts","serverRenderClock","isServer","dispatch","startClock","setInterval","addCount","initStore","initialState"],"mappings":";;AAAA,SAASA,WAAT,EAAsBC,eAAtB,QAA6C,OAA7C;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,OAAOC,eAAP,MAA4B,aAA5B;AAEA,IAAMC,mBAAmB,GAAG;AAC1BC,EAAAA,UAAU,EAAE,CADc;AAE1BC,EAAAA,KAAK,EAAE,KAFmB;AAG1BC,EAAAA,KAAK,EAAE;AAHmB,CAA5B;AAMA,OAAO,IAAMC,WAAW,GAAG;AACzBC,EAAAA,GAAG,EAAE,KADoB;AAEzBC,EAAAA,IAAI,EAAE,MAFmB,CAK3B;;AAL2B,CAApB;AAMP,OAAO,IAAMC,OAAO,GAAG,SAAVA,OAAU,GAAyC;AAAA,MAAxCC,KAAwC,uEAAhCR,mBAAgC;AAAA,MAAXS,MAAW;;AAC9D,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKN,WAAW,CAACE,IAAjB;AACE,aAAO,eAAc,EAAd,EAAkBE,KAAlB,EAAyB;AAC9BP,QAAAA,UAAU,EAAEQ,MAAM,CAACE,EADW;AAE9BT,QAAAA,KAAK,EAAE,CAAC,CAACO,MAAM,CAACP;AAFc,OAAzB,CAAP;;AAIF,SAAKE,WAAW,CAACC,GAAjB;AACE,aAAO,eAAc,EAAd,EAAkBG,KAAlB,EAAyB;AAC9BL,QAAAA,KAAK,EAAEK,KAAK,CAACL,KAAN,GAAc;AADS,OAAzB,CAAP;;AAGF;AACE,aAAOK,KAAP;AAXJ;AAaD,CAdM,C,CAgBP;;AACA,OAAO,IAAMI,iBAAiB,GAAG,SAApBA,iBAAoB,CAAAC,QAAQ;AAAA,SAAI,UAAAC,QAAQ,EAAI;AACvD,WAAOA,QAAQ,CAAC;AAAEJ,MAAAA,IAAI,EAAEN,WAAW,CAACE,IAApB;AAA0BJ,MAAAA,KAAK,EAAE,CAACW,QAAlC;AAA4CF,MAAAA,EAAE,EAAE;AAAhD,KAAD,CAAf;AACD,GAFwC;AAAA,CAAlC;AAIP,OAAO,IAAMI,UAAU,GAAG,SAAbA,UAAa;AAAA,SAAM,UAAAD,QAAQ,EAAI;AAC1C,WAAOE,WAAW,CAChB;AAAA,aAAMF,QAAQ,CAAC;AAAEJ,QAAAA,IAAI,EAAEN,WAAW,CAACE,IAApB;AAA0BJ,QAAAA,KAAK,EAAE,IAAjC;AAAuCS,QAAAA,EAAE,EAAE;AAA3C,OAAD,CAAd;AAAA,KADgB,EAEhB,IAFgB,CAAlB;AAID,GALyB;AAAA,CAAnB;AAOP,OAAO,IAAMM,QAAQ,GAAG,SAAXA,QAAW;AAAA,SAAM,UAAAH,QAAQ,EAAI;AACxC,WAAOA,QAAQ,CAAC;AAAEJ,MAAAA,IAAI,EAAEN,WAAW,CAACC;AAApB,KAAD,CAAf;AACD,GAFuB;AAAA,CAAjB;AAIP,OAAO,IAAMa,SAAS,GAAG,SAAZA,SAAY,GAAwC;AAAA,MAAvCC,YAAuC,uEAAxBnB,mBAAwB;AAC/D,SAAOJ,WAAW,CAChBW,OADgB,EAEhBY,YAFgB,EAGhBrB,mBAAmB,CAACD,eAAe,CAACE,eAAD,CAAhB,CAHH,CAAlB;AAKD,CANM","sourcesContent":["import { createStore, applyMiddleware } from 'redux'\nimport { composeWithDevTools } from 'redux-devtools-extension'\nimport thunkMiddleware from 'redux-thunk'\n\nconst exampleInitialState = {\n  lastUpdate: 0,\n  light: false,\n  count: 0\n}\n\nexport const actionTypes = {\n  ADD: 'ADD',\n  TICK: 'TICK'\n}\n\n// REDUCERS\nexport const reducer = (state = exampleInitialState, action) => {\n  switch (action.type) {\n    case actionTypes.TICK:\n      return Object.assign({}, state, {\n        lastUpdate: action.ts,\n        light: !!action.light\n      })\n    case actionTypes.ADD:\n      return Object.assign({}, state, {\n        count: state.count + 1\n      })\n    default:\n      return state\n  }\n}\n\n// ACTIONS\nexport const serverRenderClock = isServer => dispatch => {\n  return dispatch({ type: actionTypes.TICK, light: !isServer, ts: Date.now() })\n}\n\nexport const startClock = () => dispatch => {\n  return setInterval(\n    () => dispatch({ type: actionTypes.TICK, light: true, ts: Date.now() }),\n    1000\n  )\n}\n\nexport const addCount = () => dispatch => {\n  return dispatch({ type: actionTypes.ADD })\n}\n\nexport const initStore = (initialState = exampleInitialState) => {\n  return createStore(\n    reducer,\n    initialState,\n    composeWithDevTools(applyMiddleware(thunkMiddleware))\n  )\n}\n"]},"metadata":{},"sourceType":"module"}